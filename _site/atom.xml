<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Sean Zhang</title>
 <link href="http://psytown.github.com/atom.xml" rel="self"/>
 <link href="http://psytown.github.com/"/>
 <updated>2013-07-25T23:47:02+08:00</updated>
 <id>http://psytown.github.com</id>
 <author>
   <name>Sean Zhang</name>
 </author>
 
 
 <entry>
   <title>实现对div的slide效果</title>
   <link href="http://psytown.github.com/posts/div-slide"/>
   <updated>2013-07-25T00:00:00+08:00</updated>
   <id>http://psytown.github.com/posts/div-slide</id>
   <content type="html">&lt;p&gt;想把报告的分页过渡做的有趣一些，并且也适合pad端的阅读，slide效果是最为自然的一种实现方式，我们可以在很多产品中看到slide的影子，最为普遍的slide图片，这个在各大中小网站都可以看到slidebanner，另外一种则是&lt;a href=&quot;http://erly.com/&quot;&gt;Erly&lt;/a&gt;的那种横版slide效果，后来国内纯银团队的蝉游记借鉴，这种slide是对div进行整体的滑动。&lt;/p&gt;

&lt;p&gt;在google和github上找了一些slide的方案，基本搜索的话会分为三大类&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;移动端的slidemenu，最火的一些repo&lt;/li&gt;
&lt;li&gt;传统对图片的slide&lt;/li&gt;
&lt;li&gt;对div的slide效果&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;在试用多个不靠谱的方案后，最后发现&lt;a href=&quot;http://liquidslider.com/&quot;&gt;Liquid Slider 2 &lt;/a&gt;比较符合自己的预期效果，看了一眼github，这哥们几分钟前刚更新过，靠谱。&lt;/p&gt;

&lt;h4&gt;Trial process&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;新建测试文档&lt;/p&gt;

&lt;p&gt; 由于之前的文档中编辑d3和jQuery，还没有剥离js出来，索性新建一个test.html只包含到container层的新文件&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://kevinbatdorf.github.io/liquidslider/examples/page1.html&quot;&gt;Liquid Slider Examples&lt;/a&gt;在examples页面，看如何install，比较简单，就是download之后引入相关的文件。需要注意的是，里面除了引用还需要引一段function代码，查看其文档后得知，相关的配置可在该函数中进行修改。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; &amp;lt;script&amp;gt;
 $(function(){
 $(&#39;#slider-id&#39;).liquidSlider();
 });
 &amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注：“#silder-id”为你想slide的div集的最高级div的id名，可更换为其他，引入的js文件会在该div集中进行class等各种属性的添加，来实现其slide效果，所以html中的代码很简单都是&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&quot;liquid-slider&quot; id=&quot;slider-id&quot;&amp;gt;
&amp;lt;div&amp;gt;
   &amp;lt;h2 class=&quot;title&quot;&amp;gt;Slide 1&amp;lt;/h2&amp;gt;
   // Content goes here
&amp;lt;/div&amp;gt;
&amp;lt;div&amp;gt;
   &amp;lt;h2 class=&quot;title&quot;&amp;gt;Slide 2&amp;lt;/h2&amp;gt;
   // Content goes here
&amp;lt;/div&amp;gt;
&amp;lt;div&amp;gt;
   &amp;lt;h2 class=&quot;title&quot;&amp;gt;Slide 3&amp;lt;/h2&amp;gt;
   // Content goes here
&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;配置&lt;/p&gt;

&lt;p&gt;配置需要查看都有什么功能，一个是看example中的例子，另一个是看&lt;a href=&quot;http://liquidslider.com/documentation/&quot;&gt;Documentation&lt;/a&gt;，配置方法就是在添加的function函数代码中添加相应的true或者false来进行相关功能的开启和闭合，比如想使用键盘控制slide的滑动，则添加如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; &amp;lt;script&amp;gt;
 $(function(){
 $(&#39;#slider-id&#39;).liquidSlider({

 keyboardNavigation: true

 });
 });
 &amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt; 然后就能用键盘控制slide了&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;定制
和bootstrap一样，可以根据不同的选择来进行&lt;a href=&quot;http://liquidslider.com/custom-build/&quot;&gt;Custom Build&lt;/a&gt;，选择完之后，会生成相应的demo文件夹，包括html、js、css和img。
不过奇怪的是，选择后替换js，但并不是默认，而是还要再function中开启相关配置，也许可能是没找对地方，再之后开发时再注意一下吧&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;swipe功能
里面swipe功能对于移动端用户是非常有用的，移动端键盘就不起作用了，可以用滑屏来操作slide，想支持滑屏，需要安装&lt;a href=&quot;https://github.com/mattbryson/TouchSwipe-Jquery-Plugin&quot;&gt;mattbryson/TouchSwipe-Jquery-Plugin&lt;/a&gt;。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;在想有没有什么服务器插件能够在同wifi下，使用pad访问机器上的网页，grunt可以么？&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>jQuery调用JSON</title>
   <link href="http://psytown.github.com/posts/json-and-jquery"/>
   <updated>2013-07-24T00:00:00+08:00</updated>
   <id>http://psytown.github.com/posts/json-and-jquery</id>
   <content type="html">&lt;p&gt;今天在做sidebar分值列表的时候，想到用jQuery调用JSON数据，在做的过程中，发现其实里面蕴含两个知识点：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;调用JSON文件方法&lt;/li&gt;
&lt;li&gt;如何调取JSON内Object、Array的不同数据形式&lt;/li&gt;
&lt;/ol&gt;


&lt;h4&gt;调用JSON文件&lt;/h4&gt;

&lt;p&gt;调用还是比较简单的，通过$.get()方式，官方文档详见&lt;a href=&quot;http://api.jquery.com/jQuery.getJSON/&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $.getJSON(url,data,callback)

    例1：callback为调用某函数
    $.getJSON(data.json,&#39;someDataSet&#39;,someFunction)

    function someFunciton(data){
      ///balalala
    }

    例2：callback直接使用函数
    $.getJSON(data.json,&#39;someDataSet&#39;,function(data) {
    ////balalalla
    });
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;如何调取不同数据形式&lt;/h4&gt;

&lt;p&gt;需要特殊记录一下在数组中取值，我们在没有string头的情况下，需要定位array的index&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    json.users[3].name
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>d3.js应用笔记①</title>
   <link href="http://psytown.github.com/posts/d3-note-one"/>
   <updated>2013-07-23T00:00:00+08:00</updated>
   <id>http://psytown.github.com/posts/d3-note-one</id>
   <content type="html">&lt;p&gt;想展示7项测验的得分情况，直方图太过死板，故使用熟悉的force-directed阉割links之后的graph来表示，好处有两个&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;对于平板更加友好，圆形的图像更加适合平板的展示&lt;/li&gt;
&lt;li&gt;动态效果碰来碰去很有意思，直方图比较死板，动态的force图形可以拖来拖去增加趣味性&lt;/li&gt;
&lt;/ol&gt;


&lt;h4&gt;基本绘制思路：&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;画布准备：定义绘制图像的画布&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; var w = 960,
     h = 550,
     r = 6,
     fill = d3.scale.category10();

 var svg = d3.select(&quot;#result&quot;).append(&quot;svg:svg&quot;)
          .attr(&quot;width&quot;, w)
          .attr(&quot;height&quot;, h);
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;引用布局并定义&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; var force = d3.layout.force()
             .gravity(0.07)
             .charge(-800)
             .linkDistance(130)
             .size([w, h]);
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;外部数据的绑定&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; d3.json(&quot;data.json&quot;, function(json) {
    var node = svg.selectAll(&quot;circle&quot;)
              .data(json.tests)
              .enter().append(&quot;g&quot;)
              .attr(&quot;class&quot;, &quot;node&quot;)
              .on(&quot;mouseover&quot;, mouseover)
              .on(&quot;mouseout&quot;, mouseout)
              .call(force.drag);
    })
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;定义node节点&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; node.append(&quot;svg:circle&quot;)
     .attr(&quot;r&quot;, function(d) { return d.score; })
     .style(&quot;fill&quot;, function(d) { return fill(d.group); });

force.nodes(json.tests)
     .on(&quot;tick&quot;, tick)
     .start();

 function tick() {
 node.attr(&quot;transform&quot;, function(d) { return &quot;translate(&quot; + d.x + &quot;,&quot; + d.y + &quot;)&quot;; });
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;增加特征&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; node.append(&quot;text&quot;)
   .attr(&quot;dy&quot;, &quot;.35em&quot;)
   .attr(&quot;text-anchor&quot;, &quot;middle&quot;)
   .attr(&quot;class&quot;, &quot;node-text&quot;)
   .style(&quot;fill&quot;,&quot;#fff&quot;)
   .text(function(d) { return d.score; });
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;各种堪错&lt;/li&gt;
&lt;/ol&gt;


&lt;h4&gt;遇到的问题：&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;始终无法显示text内容的问题：&lt;/p&gt;

&lt;p&gt;当时enter（）之后并没有添加&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; .append(&quot;g&quot;)
 .attr(&quot;class&quot;, &quot;node&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;直接append的circle，在添加text的过程中，在控制台明明可以看到text-content数据，但是始终不显示text的内容，将append独立，并添加以上代码后，问题解决。&lt;/p&gt;

&lt;p&gt; 应该是这样做之后，circle和text的等级就是平级，都在g之下，这样就可以显示了。耗时较长，注意该问题。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;颜色的问题：
一开始始终不会使用颜色的scale，现在看应该是当时定义的变量和后面的变量引用不符：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; fill = d3.scale.category10();
 …
 .style(&quot;fill&quot;, function(d) { return fill(d.group); });
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使text文字在图形中居中的代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; .attr(&quot;text-anchor&quot;, &quot;middle&quot;)
 .attr(&quot;class&quot;, &quot;node-text&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

</content>
 </entry>
 
 <entry>
   <title>Yeoman</title>
   <link href="http://psytown.github.com/posts/Yeoman"/>
   <updated>2013-07-22T00:00:00+08:00</updated>
   <id>http://psytown.github.com/posts/Yeoman</id>
   <content type="html">
</content>
 </entry>
 
 <entry>
   <title>zsh笔记</title>
   <link href="http://psytown.github.com/posts/zsh"/>
   <updated>2013-04-26T00:00:00+08:00</updated>
   <id>http://psytown.github.com/posts/zsh</id>
   <content type="html">&lt;h4&gt;相关概念&lt;/h4&gt;

&lt;blockquote&gt;&lt;p&gt;怎样理解zsh？iterm和zsh的关系是什么？&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;zsh，全称为Z-shell，是Shell（壳）的一种，在计算机科学的术语中，shell区别与核，是指“提供使用者使用界面”的软件（命令解析器），我们以前熟悉的MS-DOS就是命令行shell的一种，当然window实质上也是shell的一种，而随着图形化shell的普及，shell的含义渐渐只特指命令行的使用界面了。在OSX中，其默认的shell为bash，zsh是一种更为强大和适于个性配置的shell。&lt;/p&gt;

&lt;p&gt;iterm2，我们不难观察到一个现象，就是我们一般在使用命令行界面时都会启动OSX的终端软件，iterm是系统终端软件的替代者，可以将其看作是命令行界面在图形化界面体系中的代理或展示管理工具，所以我们可以通过iterm进行不同的shell切换。
关于iterm2的&lt;a href=&quot;http://www.yangzhiping.com/tech/iterm2.html&quot;&gt;特色功能介绍&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;安装&lt;/h4&gt;

&lt;p&gt;按照老阳的&lt;a href=&quot;http://www.yangzhiping.com/tech/mac-dev.html&quot;&gt;安装笔记&lt;/a&gt;，我们实际上做了这样几件事情：&lt;/p&gt;

&lt;p&gt;下载.dotfiles：&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;.dotfiles是为了繁复的新机配置而生的，当你在不同机器或新机上重新配置环境时，会发现这玩意忒有用了，一方面可以保存下自己的习惯用法和配置，另一方面可以使用别人优秀的dotfiles，看看高手是怎么进行配置的。老阳的做法是先下高手的东西，然后自己修改，适合入门后的自己折腾。&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Github上的&lt;a href=&quot;https://github.com/search?q=dotfiles&amp;amp;ref=cmdform&quot;&gt;dotfiles&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;安装Oh-My-Zsh：&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Oh-My-Zsh就是一个zsh的配置包，可以配置出一些比较有趣的功能，比如命令行中的主题颜色，按键进行命令填充之类&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;安装zsh：&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;安装非常简单，只要我们已经安装了Homebrew可以通过命令轻松的安装zsh。&lt;/p&gt;&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;brew install zsh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;配置：&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;我们已经安装了zsh和相应的配置包，他们存在与不同的目录中，这个时候需要用到一个Linux常用的系统命令ln -s，来为其建立软连接&lt;/p&gt;&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;ln -s ~/.dotfiles/zsh ~/.zsh
ln -s ~/.dotfiles/zsh/zshrc ~/.zshrc
ln -s ~/.dotfiles/zsh/zshenv ~/.zshenv
ln -s ~/.dotfiles/zsh/zprofile ~/.zprofile
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;&lt;p&gt;那么什么是软连接，ln的命令又是怎么回事？&lt;/p&gt;

&lt;p&gt;ln是link 是链接的意思，再其后加参数可代表建立链接的类型，比如-s，是标识软链接，我们可以将其理解为为某一个文件在另外一个位置建立一个同步的链接，通常不加参数时会将源文件copy到目标目录下，而软链接则不会拷贝目录，而只产生镜像，这样能够保证不占用重复的硬盘空间，又能够保持两者的同步。&lt;/p&gt;&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;对zsh设置默认
1、打开配置文件
subl /etc/shells
2、添加zsh路径
/usr/local/bin/zsh
3、保存后到命令行中执行默认命令
chsh -s /usr/local/bin/zsh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;link&lt;a href=&quot;http://www.linuxso.com/command/ln.html&quot;&gt;命令解释&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;相关配置文件的下载和安装详见老阳笔记不再重述，配置应该根据不同人的习惯而进行设置，在你对此没有概念的时候，可以采取使用流行配置，使用高手配置的方法，来看是否顺手，并在此基础上进行修改。&lt;/p&gt;

&lt;h4&gt;技巧1：如何进行别名快捷方式（aliases）的建立&lt;/h4&gt;

&lt;p&gt;为什么要建立别名？建立别名可以在命令行界面快速的启动某种服务或开启某个目录，类似于我们在桌面上设置快捷方式，以方便我们更加有效率的工作。&lt;/p&gt;

&lt;p&gt;进入zsh目录&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd .dotfiles  #进入.dotfiles文件夹
cd .zsh       #进入zsh
subl .        #启动sublime text2对该文件夹文件进行编辑
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;打开aliases.zsh
我们可以看到类似这样的字样&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;alias ga=&#39;git add&#39;
alias gp=&#39;git push&#39;
alias gl=&#39;git log&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;现在的需求是建立一个快速进入某项目路径的别名，在其中添加&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;alias &#39;snaapp=cd dev/github/sna.psyapp.com&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;重启iterm后，在终端输入&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ snaapp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;则会自动跳转至所设置的目录了&lt;/p&gt;

&lt;h4&gt;技巧2:如何应对zsh的“Command not found”问题&lt;/h4&gt;

&lt;p&gt;在安装一些软件的过程中，经常会碰到明明已经安装好了，但是zsh显示找不到该命令，多半和路径有关，因为安装的方法各不相同，有可能软件安装在硬盘的不同文件夹内，而zsh会在配置文件中写好优先在一些文件地址内寻找，如果你安装的路径不在里面，zsh就无法识别了。&lt;/p&gt;

&lt;p&gt;如何打开系统默认路径的配置文件：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;subl /etc/paths
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;一般修改后的次序如下，Homebrew的安装路径优先：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/usr/local/bin
/usr/bin
/bin
/usr/sbin
/sbin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在一些安装到其他目录无法识别的软件命令，你可以将其添加在尾部，即可识别。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Jekyll+Github打造Blog</title>
   <link href="http://psytown.github.com/posts/jekyll"/>
   <updated>2013-04-26T00:00:00+08:00</updated>
   <id>http://psytown.github.com/posts/jekyll</id>
   <content type="html">&lt;h3&gt;安装jekyll&lt;/h3&gt;

&lt;p&gt;进入&lt;a href=&quot;http://www.jekyllrb.com&quot;&gt;jekyll官方站&lt;/a&gt;，看到code、docs、install和switch，我们先来看看install，跳转至&lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/install&quot;&gt;页面&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;包括如下内容&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;安装jekyll&lt;/li&gt;
&lt;li&gt;介绍所支持的LaTeX to PNG&lt;/li&gt;
&lt;li&gt;RDiscount&lt;/li&gt;
&lt;li&gt;Pygments的安装和使用&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;先只关注Jekyll，其他的稍后再表，安装jekyll很简单，由于是基于ruby开发，所以通过rubygem的方式安装是最简单的&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem install jekyll
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;安装完毕，看如何&lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/usage&quot;&gt;使用&lt;/a&gt;和&lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/configuration&quot;&gt;配置&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;jekyll的使用&lt;/h3&gt;

&lt;p&gt;可以看到在jekyll的使用篇介绍，使用流程是非常简单的：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;建立所约定的一个站点框架结构&lt;/li&gt;
&lt;li&gt;准备一些文章&lt;/li&gt;
&lt;li&gt;在本地运行&lt;/li&gt;
&lt;li&gt;提交blog&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;一项一项进行：&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;建立所约定的一个站点框架结构&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;官方所展示的标准框架如下,如果接触过rails的同学就会对约定框架的这种模式非常熟悉，你要做的事情就是在约定的地方放约定的文件:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
|-- _config.yml
|-- _includes
|-- _layouts
|   |-- default.html
|   `-- post.html
|-- _posts
|   |-- 2007-10-29-why-every-programmer-should-play-nethack.textile
|   `-- 2009-04-26-barcamp-boston-4-roundup.textile
|-- _site
`-- index.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在jekyll的整个基础框架中&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;config.yml:所有配置均写在该文件中&lt;/li&gt;
&lt;li&gt;_layouts:页面中的布局样例&lt;/li&gt;
&lt;li&gt;_posts：用markdown写完文章扔在这里面&lt;/li&gt;
&lt;li&gt;_site：&lt;/li&gt;
&lt;li&gt;index.html:这个不用多说了，首页的html文件&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;了解完之后，你可以有两个选择：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;从网上下载&lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Sites&quot;&gt;其他人&lt;/a&gt;的jekyll模板，修改后push到github上;&lt;/li&gt;
&lt;li&gt;自己按照这个路径框架设计一个jekyll模板;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;就两个任务而言，前一个所考察的是对git和github的使用熟悉度，后一个除了考察git以外，还要求建blog的同学具备一定的HTML和CSS的基础知识。大家根据自己的小白程度而自己选择相应的任务完成，别把学习曲线搞的太陡峭。&lt;/p&gt;

&lt;p&gt;我们先按照第一个任务往下进行&lt;/p&gt;

&lt;h3&gt;推送到github上&lt;/h3&gt;

&lt;p&gt;执行该任务务必满足两个假设：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;假设你已经在刚才推荐的&lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Sites&quot;&gt;模板&lt;/a&gt;地址中找到了心仪的，而且已经通过github的ZIP包下载到了本地&lt;/li&gt;
&lt;li&gt;假设你已经拥有一个github账号&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;jekyll的配置&lt;/h3&gt;
</content>
 </entry>
 
 
</feed>